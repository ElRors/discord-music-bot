const { SlashCommandBuilder } = require('discord.js');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('testautoplay')
        .setDescription('Probar el sistema de autoplay manualmente'),

    async execute(interaction) {
        await interaction.reply('üß™ Probando sistema de autoplay...');
        
        // Simular que hay una canci√≥n en el historial
        if (!global.lastPlayedSongs) {
            global.lastPlayedSongs = [];
        }
        
        // Agregar canciones de prueba al historial
        global.lastPlayedSongs.push("Tool - Sober");
        global.lastPlayedSongs.push("System of a Down - Chop Suey");
        
        console.log(`üß™ [TEST] Historial simulado: ${JSON.stringify(global.lastPlayedSongs)}`);
        console.log(`üß™ [TEST] Modo radio: ${global.radioMode}`);
        
        // Simular canci√≥n actual
        global.currentSong = {
            title: "Test Song",
            isAutoplay: false
        };
        
        // Simular que se termin√≥ la canci√≥n y no hay cola
        global.musicQueue = [];
        
        // Asignar canales de prueba
        global.lastTextChannel = interaction.channel;
        global.lastVoiceChannel = interaction.member.voice.channel;
        
        if (!global.lastVoiceChannel) {
            return await interaction.followUp('‚ùå Debes estar en un canal de voz para probar!');
        }
        
        console.log(`üß™ [TEST] Canales asignados - Voz: ${global.lastVoiceChannel.name}, Texto: ${global.lastTextChannel.name}`);
        
        // Importar la funci√≥n de recomendaci√≥n directamente
        try {
            const playModule = require('./play.js');
            
            // Llamar a la funci√≥n de autoplay manualmente
            console.log('üß™ [TEST] Simulando evento AudioPlayerStatus.Idle...');
            
            // Simular el evento Idle
            setTimeout(async () => {
                console.log('üéµ [TEST] Canci√≥n terminada, verificando siguiente...');
                console.log(`üéµ [TEST] Modo radio activo: ${global.radioMode}`);
                console.log(`üéµ [TEST] Canci√≥n actual: ${global.currentSong ? global.currentSong.title : 'NO'}`);
                
                // Agregar canci√≥n actual al historial si no es autoplay
                if (global.currentSong && !global.currentSong.isAutoplay) {
                    console.log(`üéµ [TEST] Agregando al historial: ${global.currentSong.title}`);
                    // Simular addToHistory
                    global.lastPlayedSongs.push(global.currentSong.title);
                    if (global.lastPlayedSongs.length > 10) {
                        global.lastPlayedSongs.shift();
                    }
                }
                
                console.log(`üìù [TEST] Canciones restantes en cola: ${global.musicQueue ? global.musicQueue.length : 0}`);
                console.log(`üìù [TEST] Historial actual: [${global.lastPlayedSongs ? global.lastPlayedSongs.join(', ') : 'VAC√çO'}]`);
                
                // Verificar si hay m√°s canciones o si activar autoplay
                if (!global.musicQueue || global.musicQueue.length === 0) {
                    console.log('‚è∞ [TEST] No hay m√°s canciones en la cola');
                    
                    // Si est√° activado el modo radio, buscar recomendaci√≥n
                    if (global.radioMode) {
                        console.log('üìª [TEST] Modo radio activado, buscando recomendaci√≥n...');
                        
                        // Simular b√∫squeda de recomendaci√≥n
                        await interaction.followUp('üìª **Modo Radio:** Buscando recomendaci√≥n autom√°tica...');
                        
                        // Simular recomendaci√≥n encontrada
                        const fakeRecommendation = {
                            title: "Recommended Song - Similar to " + global.lastPlayedSongs[global.lastPlayedSongs.length - 1],
                            url: "https://www.youtube.com/watch?v=fake",
                            source: 'AUTOPLAY-YT',
                            requestedBy: 'Radio Bot',
                            isAutoplay: true
                        };
                        
                        console.log(`ü§ñ [TEST] Recomendaci√≥n simulada: ${fakeRecommendation.title}`);
                        
                        await interaction.followUp(`üìª **Modo Radio:** Reproduciendo autom√°ticamente **${fakeRecommendation.title}**`);
                        
                    } else {
                        console.log('üìª [TEST] Modo radio NO est√° activado');
                        await interaction.followUp('‚è∞ Modo radio desactivado - iniciando timer de inactividad');
                    }
                }
                
            }, 2000);
            
            await interaction.followUp('üß™ Test de autoplay iniciado. Revisa los logs en la consola.');
            
        } catch (error) {
            console.error('‚ùå [TEST] Error en test de autoplay:', error);
            await interaction.followUp('‚ùå Error en el test de autoplay: ' + error.message);
        }
    },
};